const express = require('express');
const https = require('https');
const router = express.Router();
const apiKeyMiddleware = require('../middlewares/apiKeyMiddleware'); // Import the middleware

// Apply middleware to all routes
router.use(apiKeyMiddleware);

const fetchApiData = (url, res, processData) => {
    https.get(url, { headers: { 'User-Agent': 'WEAO-3PService' } }, (apiRes) => {
        let data = '';
        apiRes.on('data', (chunk) => {
            data += chunk;
        });
        apiRes.on('end', () => {
            try {
                const jsonData = JSON.parse(data);
                processData(jsonData);
            } catch (err) {
                res.status(500).send('Error parsing API data');
            }
        });
    }).on('error', (err) => {
        res.status(500).send('Error fetching data from API');
    });
};

// Count all exploits
router.get('/count', (req, res) => {
    fetchApiData('https://weao.xyz/api/status/exploits', res, (jsonData) => {
        const exploitCount = jsonData.length;
        res.json({ exploitCount });
    });
});

// Get summary of detected and safe exploits
router.get('/summary', (req, res) => {
    fetchApiData('https://weao.xyz/api/status/exploits', res, (jsonData) => {
        const detectedExploits = jsonData.filter(exploit => exploit.detected).length;
        const safeExploits = jsonData.length - detectedExploits;
        res.json({ detectedExploits, safeExploits });
    });
});

// Get exploits by platform (Windows)
router.get('/', (req, res) => {
    fetchApiData('https://weao.xyz/api/status/exploits', res, (jsonData) => {
        res.json(jsonData);
    });
});

// Get exploits by platform (Windows)
router.get('/windows', (req, res) => {
    fetchApiData('https://weao.xyz/api/status/exploits', res, (jsonData) => {
        const windowsExploits = jsonData.filter(exploit => exploit.platform === 'Windows');
        res.json(windowsExploits);
    });
});

// Get exploits by platform (Mac)
router.get('/mac', (req, res) => {
    fetchApiData('https://weao.xyz/api/status/exploits', res, (jsonData) => {
        const macExploits = jsonData.filter(exploit => exploit.platform === 'Mac');
        res.json(macExploits);
    });
});

// Get detected exploits
router.get('/detected', (req, res) => {
    fetchApiData('https://weao.xyz/api/status/exploits', res, (jsonData) => {
        const detectedExploits = jsonData.filter(exploit => exploit.detected);
        res.json(detectedExploits);
    });
});

// Get undetected exploits
router.get('/undetected', (req, res) => {
    fetchApiData('https://weao.xyz/api/status/exploits', res, (jsonData) => {
        const undetectedExploits = jsonData.filter(exploit => !exploit.detected);
        res.json(undetectedExploits);
    });
});

// Get free exploits
router.get('/free', (req, res) => {
    fetchApiData('https://weao.xyz/api/status/exploits', res, (jsonData) => {
        const freeExploits = jsonData.filter(exploit => exploit.free);
        res.json(freeExploits);
    });
});

// Get paid exploits
router.get('/paid', (req, res) => {
    fetchApiData('https://weao.xyz/api/status/exploits', res, (jsonData) => {
        const paidExploits = jsonData.filter(exploit => !exploit.free);
        res.json(paidExploits);
    });
});

// Get exploits in development (indev)
router.get('/indev', (req, res) => {
    fetchApiData('https://weao.xyz/api/status/exploits', res, (jsonData) => {
        const indevExploits = jsonData.filter(exploit => exploit.indev);
        res.json(indevExploits);
    });
});

module.exports = router;
